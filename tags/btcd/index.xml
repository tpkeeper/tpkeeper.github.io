<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>btcd on 大远的博客</title>
    <link>https://tpkeeper.github.io/tags/btcd/</link>
    <description>Recent content in btcd on 大远的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2019 17:04:40 +0800</lastBuildDate>
    
	<atom:link href="https://tpkeeper.github.io/tags/btcd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>btcd 源码分析系列：7 - rpc</title>
      <link>https://tpkeeper.github.io/btcd-src-rpc/</link>
      <pubDate>Fri, 30 Aug 2019 17:04:40 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-rpc/</guid>
      <description>参考：btcd btcd实现了基于http的和websocket的json-rpc,支持http Basic authentication。 websocket通道 支持所有的请求类型，http通道不支持通知类（notify）的请求 http/websocket是传输协议，json是序列化协议。 一、start 启动一个s</description>
    </item>
    
    <item>
      <title>btcd 源码分析系列：6 - mempool</title>
      <link>https://tpkeeper.github.io/btcd-src-mempool/</link>
      <pubDate>Fri, 30 Aug 2019 17:04:31 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-mempool/</guid>
      <description>参考：btcd btcd提供了一个内存池mempool，用于存储还未被矿工打包的交易。 utxo和block index存储于leveldb中，而不是本文讨论的mempool 被插入之前要进行一系列的正确性验证（通过mabeAcceptTransaction）。 如果是orphan tx（即在main chain</description>
    </item>
    
    <item>
      <title>btcd源码分析系列：5 - p2p网络的消息协议</title>
      <link>https://tpkeeper.github.io/btcd-src-wire/</link>
      <pubDate>Fri, 30 Aug 2019 17:04:19 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-wire/</guid>
      <description>参考：protocol document 、btcd 协议其实就是一个标准，btc有多种语言的实现版本，他们之间能够正常通信的基础就是共同遵守了这个标准。btc定义的协议有很多，包括p2p之间通信协议、交易认证协议、pow共识协议等等。本文主要分析p2p网络的消息协议及代码实现 btc 的p2p网络的传输层支持tcp、udp、</description>
    </item>
    
    <item>
      <title>btcd 源码分析系列：4 - p2p网络的peer</title>
      <link>https://tpkeeper.github.io/btcd-src-peer/</link>
      <pubDate>Fri, 30 Aug 2019 17:04:14 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-peer/</guid>
      <description>参考：btcd btc在p2p网络中与每一个节点的连接都视为一个peer对象，与该节点的消息交换都是通过该peer进行。本文主要分析peer对象的创建以及wire协议消息的收发机制。对应btcd中package peer，该package主要提供了与其他节点连接建立之后peer的创建，协商，消息处理，以</description>
    </item>
    
    <item>
      <title>btcd 源码分析系列：3 - connmanager</title>
      <link>https://tpkeeper.github.io/btcd-src-connmanager/</link>
      <pubDate>Fri, 30 Aug 2019 17:03:47 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-connmanager/</guid>
      <description>参考：btcd connmanamger 负责节点的连接处理，包括监听来自其他节点的连接请求和主动向其他节点发起连接请求，并将获取到的连接对象conn交给回调函数处理，实际上这些回调函数是由server实现的，它们会根据conn生成对应的peer，交由peer处理之后的逻辑 默认outbound peer数量为8 节点发现 address database （第</description>
    </item>
    
    <item>
      <title>btcd 源码分析系列：2 - addrmanager</title>
      <link>https://tpkeeper.github.io/btcd-src-addrmanager/</link>
      <pubDate>Fri, 30 Aug 2019 17:03:29 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-addrmanager/</guid>
      <description>参考：btcd addrmanager 主要提供了peer地址的管理功能，包括地址的增删查改 通过存储json序列化后的数据到本地文件实现持久化 btc启动的时候，会读取该json文件，将保存的节点信息读取到内存中 btc运行的过程中，每过一段时间（十分钟）就持久化一次，以备下次启动时使用 btc退出时，会再次持久化一次 一、创建a</description>
    </item>
    
    <item>
      <title>btcd 源码分析系列 - 1 - 启动分析</title>
      <link>https://tpkeeper.github.io/btcd-src-start/</link>
      <pubDate>Fri, 30 Aug 2019 13:56:08 +0800</pubDate>
      
      <guid>https://tpkeeper.github.io/btcd-src-start/</guid>
      <description>参考：btcd 主启动顺序 main函数位于btcd.go，此处省略了辅助功能的服务（profile等） loadconfig() 加载配置 doUpgrades() 升级操作 loadBlockDB() 加载数据库 server.start() 启动server func btcdMain(serverChan chan&amp;lt;- *server) error { // Load configuration and parse command line. This function also // initializes logging and configures it accordingly. tcfg, _, err := loadConfig() if err != nil { return err } cfg = tcfg defer func() { if logRotator != nil { logRotator.Close() } }() // Load the block database. db, err := loadBlockDB() if err != nil { btcdLog.Errorf(&amp;quot;%v&amp;quot;, err) return err } defer func() { // Ensure the</description>
    </item>
    
  </channel>
</rss>